{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/DESIGN_PATTERN",
    "result": {"pageContext":{"currentCategory":"DESIGN_PATTERN","categories":["All","JAVA","DESIGN_PATTERN","블로그"],"edges":[{"node":{"id":"e7b17bcd-98c7-50ab-a1a9-3c7226b78d0e","excerpt":"1) SRP(Single Responsibility Principle) 단일 책임 원칙 객체에 한가지 만을 할당해야 하며, 해당 책임을 유일하게 가지고 있어야 함 “클래스를 변경하는 이유는 단 한 개여야 한다”라고 표현하기도 함 (회귀 테스트를 통해 평가 가능) ❗️ 책임을 구분짓는 중요한 기준 :  변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것 🥎 SRP 원칙의 장점 높은 응집도 - 응집도가 높으면 관련 기능이 한 클래스에 모여있어 유지 보수, 재사용이 쉽다 낮은 결합도 - 결합도가 낮으면 변경에 영향을 받는 클래스들이 줄어들어 회귀 테스트에 용이 응집도 : 한 프로그램요소(클래스, 매서드)가 뭉쳐있는 척도 결합도 : 프로그램 구성 요소들 사이의 의존도를 나타내는 척도 🥎 SRP 원칙을 지키지 않았을 때 문제점 1) 유지보수가 어려움  책임의 개수가 많으면 다른 객체에 주는 영향이 커지므로 사소한 변경으로도 대대적인 수정 필요 클래스가 담당하는 변경사유가 많다면…","fields":{"slug":"/SOLID_원칙/"},"frontmatter":{"categories":"JAVA DESIGN_PATTERN","title":"SOLID 원칙","date":"April 15, 2022"}},"next":{"fields":{"slug":"/개발_블로그_시작/"}},"previous":null}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}